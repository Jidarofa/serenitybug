"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetNestedElement = exports.TargetElement = exports.TargetNestedElements = exports.TargetElements = exports.Target = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const lists_1 = require("./lists");
/**
 * @desc
 *  Provides a convenient way to retrieve a single web element or multiple web elements,
 *  so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.
 *
 *  Check out the examples below, as well as the unit tests demonstrating the usage.
 *
 *  @example <caption>Imaginary website under test</caption>
 *   <body>
 *       <ul id="basket">
 *           <li><a href="#">Apple</a></li>
 *           <li><a href="#">Banana</a></li>
 *           <li><a href="#">Coconut</a></li>
 *           <li><a href="#" class="has-discount">Date</a></li>
 *       </ul>
 *       <div id="summary">
 *           <strong class="out-of-stock">Coconut</strong> is not available
 *       </div>
 *       <button type="submit">Proceed to Checkout</button>
 *   </body>
 *
 *  @example <caption>Locating a single element</caption>
 *   import { by, Target, TargetElement } from '@serenity-js/webdriverio';
 *
 *   const proceedToCheckoutButton: TargetElement =
 *       Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));
 *
 *  @example <caption>Locating multiple elements</caption>
 *   import { by, Target, TargetElements } from '@serenity-js/webdriverio';
 *
 *   const basketItems: TargetElements =
 *       Target.all('items in the basket').located(by.css('ul#basket li'));
 *
 *  @example <caption>Locating element relative to another element</caption>
 *   import { by, Target, TargetElement } from '@serenity-js/webdriverio';
 *
 *   const summary: TargetElement =
 *       Target.the('summary').located(by.id('message'));
 *
 *   const outOfStockItem: TargetElement =
 *       Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))
 *
 *  @example <caption>Filtering elements matched by a locator</caption>
 *   import { by, Target, Text } from '@serenity-js/webdriverio';
 *   import { endsWith } from '@serenity-js/assertions';
 *
 *   const basketItems =
 *       Target.all('items in the basket').located(by.css('ul#basket li'))
 *          .where(Text, endsWith('e'));    // Apple, Date
 *
 *  @example <caption>Counting items matched by a locator</caption>
 *   import { endsWith } from '@serenity-js/assertions';
 *   import { Question } from '@serenity-js/core';
 *   import { by, Target, Text } from '@serenity-js/webdriverio';
 *
 *   const basketItemsCount: Question<Promise<number>> =
 *       Target.all('items in the basket').located(by.css('ul#basket li'))
 *          .count()    // 4
 *
 *  @example <caption>Getting first item matched by a locator</caption>
 *   import { Question } from '@serenity-js/core';
 *   import { by, Target } from '@serenity-js/webdriverio';
 *   import { Element } from 'webdriverio';
 *
 *   const apple: Question<Promise<Element<'async'>>>  =
 *       Target.all('items in the basket').located(by.css('ul#basket li'))
 *          .first()
 *
 *  @example <caption>Getting last item matched by a locator</caption>
 *   import { Question } from '@serenity-js/core';
 *   import { by, Target } from '@serenity-js/webdriverio';
 *   import { endsWith } from '@serenity-js/assertions';
 *   import { Element } from 'webdriverio';
 *
 *   const date: Question<Promise<Element<'async'>>>  =
 *       Target.all('items in the basket').located(by.css('ul#basket li'))
 *          .last()
 *
 *  @example <caption>Getting nth item matched by a locator</caption>
 *   import { Question } from '@serenity-js/core';
 *   import { by, Target } from '@serenity-js/webdriverio';
 *   import { Element } from 'webdriverio';
 *
 *   const banana: Question<Promise<Element<'async'>>>  =
 *       Target.all('items in the basket').located(by.css('ul#basket li'))
 *          .get(1)
 *
 *  @example <caption>Using multiple filters and nested targets</caption>
 *   import { Question } from '@serenity-js/core';
 *   import { contain, endsWith } from '@serenity-js/assertions';
 *   import { by, CSSClasses, Target, Text } from '@serenity-js/webdriverio';
 *   import { Element } from 'webdriverio';
 *
 *   class Basket {
 *       static component = Target.the('basket').located(by.id('basket'));
 *
 *       static items     = Target.all('items').located(by.css('li'))
 *          .of(Basket.component);
 *
 *       static link      = Target.the('link').located(by.css('a'));
 *   }
 *
 *   const date: Question<Promise<Element<'async'>>>  =
 *       Basket.items
 *          .where(Text, endsWith('e'))
 *          .where(CSSClasses.of(Basket.link), contain('has-discount'))
 *          .first()
 *
 *  @example <caption>Clicking on an element</caption>
 *   import { actorCalled } from '@serenity-js/core';
 *   import { BrowseTheWeb, Click } from '@serenity-js/webdriverio';
 *
 *   actorCalled('Jane')
 *       .whoCan(BrowseTheWeb.using(browser))
 *       .attemptsTo(
 *           Click.on(proceedToCheckoutButton),
 *       );
 *
 *  @example <caption>Retrieving text of multiple elements and performing an assertion</caption>
 *   import { Ensure, contain } from '@serenity-js/assertions';
 *   import { actorCalled } from '@serenity-js/core';
 *   import { BrowseTheWeb, Text } from '@serenity-js/webdriverio';
 *
 *   const basketItemNames = Text.ofAll(basketItems);
 *
 *   actorCalled('Jane')
 *       .whoCan(BrowseTheWeb.using(browser))
 *       .attemptsTo(
 *           Ensure.that(basketItemNames, contain('Apple'))
 *       );
 *
 *  @example <caption>Waiting on an element</caption>
 *   import { actorCalled } from '@serenity-js/core';
 *   import { BrowseTheWeb, Wait, isClickable } from '@serenity-js/webdriverio';
 *
 *   actorCalled('Jane')
 *       .whoCan(BrowseTheWeb.using(browser))
 *       .attemptsTo(
 *           Wait.until(proceedToCheckoutButton, isClickable()),
 *       );
 */
class Target {
    /**
     * @desc
     *  Locates a single Web element
     *
     * @param {string} description
     *  A human-readable name of the element, which will be used in the report
     *
     * @returns {TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}
     */
    static the(description) {
        return {
            located(locator) {
                return new TargetElement(`the ${description}`, locator);
            },
            of(parent) {
                return {
                    located(locator) {
                        return new TargetNestedElement(parent, new TargetElement(description, locator));
                    }
                };
            }
        };
    }
    /**
     * @desc
     *  Locates a group of Web elements
     *
     * @param {string} description
     *  A human-readable name of the group of elements, which will be used in the report
     *
     * @returns {TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}
     */
    static all(description) {
        return {
            located(locator) {
                return new TargetElements(description, locator);
            },
            of(parent) {
                return {
                    located(locator) {
                        return new TargetNestedElements(parent, new TargetElements(description, locator));
                    }
                };
            }
        };
    }
}
exports.Target = Target;
/**
 * @desc
 *  You probably don't want to use this class directly. See {@link Target} instead.
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 *
 * @see {@link Target}
 */
class TargetElements extends core_1.Question {
    constructor(description, locator) {
        super(description);
        this.locator = locator;
        this.list = new core_1.List(new lists_1.ElementArrayListAdapter(this));
    }
    of(parent) {
        return new TargetNestedElements(parent, this);
    }
    count() {
        return this.list.count();
    }
    first() {
        return this.list.first();
    }
    last() {
        return this.list.last();
    }
    get(index) {
        return this.list.get(index);
    }
    where(question, expectation) {
        return this.list.where(question, expectation);
    }
    answeredBy(actor) {
        return this.locator.allMatching()
            .describedAs(this.subject)
            .answeredBy(actor);
    }
}
exports.TargetElements = TargetElements;
/**
 * @desc
 *  You probably don't want to use this class directly. See {@link Target} instead.
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 *
 * @see {@link Target}
 */
class TargetNestedElements extends core_1.Question {
    constructor(parent, children) {
        super(`${children} of ${parent}`);
        this.parent = parent;
        this.children = children;
        this.list = new core_1.List(new lists_1.ElementArrayListAdapter(this));
    }
    of(parent) {
        return new TargetNestedElements(parent, this);
    }
    count() {
        return this.list.count();
    }
    first() {
        return this.list.first();
    }
    last() {
        return this.list.last();
    }
    get(index) {
        return this.list.get(index);
    }
    where(question, expectation) {
        return this.list.where(question, expectation);
    }
    async answeredBy(actor) {
        const parent = await actor.answer(this.parent);
        const children = await actor.answer(this.children);
        if (!parent) {
            throw new core_1.LogicError((0, io_1.formatted) `Couldn't find ${this.parent}`);
        }
        return parent.$$(children.selector);
    }
}
exports.TargetNestedElements = TargetNestedElements;
/**
 * @desc
 *  You probably don't want to use this class directly. See {@link Target} instead.
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 *
 * @see {@link Target}
 */
class TargetElement extends core_1.Question {
    constructor(description, locator) {
        super(description);
        this.locator = locator;
    }
    of(parent) {
        return new TargetNestedElement(parent, this);
    }
    answeredBy(actor) {
        return this.locator.firstMatching()
            .describedAs(this.subject)
            .answeredBy(actor);
    }
}
exports.TargetElement = TargetElement;
/**
 * @desc
 *  You probably don't want to use this class directly. See {@link Target} instead.
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 *
 * @see {@link Target}
 */
class TargetNestedElement extends core_1.Question {
    constructor(parent, child) {
        super(`${child} of ${parent}`);
        this.parent = parent;
        this.child = child;
    }
    of(parent) {
        return new TargetNestedElement(parent, this);
    }
    async answeredBy(actor) {
        const parent = await actor.answer(this.parent);
        const child = await actor.answer(this.child);
        if (!parent) {
            throw new core_1.LogicError((0, io_1.formatted) `Couldn't find ${this.parent}`);
        }
        return parent.$(child.selector);
    }
}
exports.TargetNestedElement = TargetNestedElement;
//# sourceMappingURL=targets.js.map