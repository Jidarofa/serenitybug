import { Answerable, AnswersQuestions, Expectation, MetaQuestion, UsesAbilities } from '@serenity-js/core';
import { ListAdapter } from '@serenity-js/core/lib/screenplay/questions/lists';
import type { Element, ElementArray } from 'webdriverio';
/**
 * @desc
 *  Adapts {@link ElementArray} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.
 *
 *  You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.
 *
 * @see {@link Target}
 *
 * @implements {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter}
 */
export declare class ElementArrayListAdapter implements ListAdapter<Promise<Element<'async'>>, Promise<ElementArray>> {
    private readonly collection;
    constructor(collection: Answerable<ElementArray>);
    /**
     * @desc
     *  Returns the number of {@link Element}s that the underlying {@link ElementArray} contains,
     *  left after applying any filters.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<number>}
     */
    count(actor: AnswersQuestions & UsesAbilities): Promise<number>;
    /**
     * @desc
     *  Returns the first of {@link Element}s that the underlying {@link ElementArray} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Element<'async'>}
     */
    first(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>>;
    /**
     * @desc
     *  Returns the last of {@link Element}s that the underlying {@link ElementArray} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Element<'async'>}
     */
    last(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>>;
    /**
     * @desc
     *  Returns the nth of {@link Element}s that the underlying {@link ElementArray} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     *
     * @param {number} index
     *  Zero-based index of the item to return
     *
     * @returns {Element<'async'>}
     */
    get(actor: AnswersQuestions & UsesAbilities, index: number): Promise<Element<'async'>>;
    /**
     * @desc
     *  Returns the underlying {@link ElementArray},
     *  with any filters applied.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Element<'async'>}
     */
    items(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray>;
    /**
     * @desc
     *  Filters the underlying {@link ElementArray} so that the result contains only those {@link Element<'async'>}s that meet the {@link Expectation}
     *
     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>} question
     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_Type>} expectation
     *
     * @returns {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<Element<'async'>, ElementArrayFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    withFilter<Answer_Type>(question: MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>, expectation: Expectation<any, Answer_Type>): ListAdapter<Promise<Element<'async'>>, Promise<ElementArray>>;
    /**
     * @desc
     *  Returns a human-readable description of the underlying {@link ElementArray}.
     *
     * @returns {string}
     */
    toString(): string;
    private elements;
}
